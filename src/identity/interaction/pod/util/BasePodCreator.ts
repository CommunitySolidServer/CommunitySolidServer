import { getLoggerFor } from 'global-logger-factory';
import type { ResourceIdentifier } from '../../../../http/representation/ResourceIdentifier';
import type { IdentifierGenerator } from '../../../../pods/generate/IdentifierGenerator';
import type { PodSettings } from '../../../../pods/settings/PodSettings';
import { BadRequestHttpError } from '../../../../util/errors/BadRequestHttpError';
import { joinUrl } from '../../../../util/PathUtil';
import type { WebIdStore } from '../../webid/util/WebIdStore';
import { PodCreator } from './PodCreator';
import type { PodCreatorInput, PodCreatorOutput } from './PodCreator';
import type { PodStore } from './PodStore';

export interface BasePodCreatorArgs {
  /**
   * Base URL of the server.
   * Used to potentially set the `solid:oidcIssuer` triple
   * and/or the pod URL if it is a root pod.
   */
  baseUrl: string;
  /**
   * Generates the base URL of the pod based on the input `name`.
   */
  identifierGenerator: IdentifierGenerator;
  /**
   * The path of where the WebID will be generated by the template, relative to the pod URL.
   */
  relativeWebIdPath: string;
  /**
   * WebID data store.
   */
  webIdStore: WebIdStore;
  /**
   * Pod data store.
   */
  podStore: PodStore;
}

/**
 * Handles the creation of pods.
 * Will call the stored {@link PodStore} with the provided settings.
 */
export class BasePodCreator extends PodCreator {
  protected readonly logger = getLoggerFor(this);

  protected readonly baseUrl: string;
  protected readonly identifierGenerator: IdentifierGenerator;
  protected readonly relativeWebIdPath: string;
  protected readonly webIdStore: WebIdStore;
  protected readonly podStore: PodStore;

  public constructor(args: BasePodCreatorArgs) {
    super();
    this.baseUrl = args.baseUrl;
    this.identifierGenerator = args.identifierGenerator;
    this.relativeWebIdPath = args.relativeWebIdPath;
    this.webIdStore = args.webIdStore;
    this.podStore = args.podStore;
  }

  public async handle(input: PodCreatorInput): Promise<PodCreatorOutput> {
    const baseIdentifier = this.generateBaseIdentifier(input.name);
    // Either the input WebID or the one generated in the pod
    const webId = input.webId ?? joinUrl(baseIdentifier.path, this.relativeWebIdPath);

    const podSettings: PodSettings = {
      ...input.settings,
      base: baseIdentifier,
      webId,
    };

    // Link the WebID to the account immediately if no WebID was provided as this is expected behaviour.
    // We do this first as we can't undo creating the pod if this would fail.
    // If an external WebID is the owner we do not want to link it to the account automatically
    const webIdLink = await this.handleWebId(!input.webId, webId, input.accountId, podSettings);

    // Create the pod
    const podId = await this.createPod(input.accountId, podSettings, !input.name, webIdLink);

    return {
      podUrl: baseIdentifier.path,
      webId,
      podId,
      webIdLink,
    };
  }

  protected generateBaseIdentifier(name?: string): ResourceIdentifier {
    if (name) {
      return this.identifierGenerator.generate(name);
    }
    return { path: this.baseUrl };
  }

  /**
   * Links the WebID to the account if `linkWebId` is true.
   * Also updates the `oidcIssuer` value in the settings object in that case.
   */
  protected async handleWebId(linkWebId: boolean, webId: string, accountId: string, settings: PodSettings):
  Promise<string | undefined> {
    if (linkWebId) {
      // It is important that this check happens here.
      // Otherwise, if the account already has this WebID link,
      // this link would be deleted if pod creation fails,
      // since we clean up the WebID link again afterwards.
      // Current implementation of the {@link WebIdStore} also has this check but better safe than sorry.
      if (await this.webIdStore.isLinked(webId, accountId)) {
        this.logger.warn('Trying to create pod which would generate a WebID that is already linked to this account');
        throw new BadRequestHttpError(`${webId} is already registered to this account.`);
      }
      // Need to have the necessary `solid:oidcIssuer` triple if the WebID is linked
      settings.oidcIssuer = this.baseUrl;

      return this.webIdStore.create(webId, accountId);
    }
  }

  /**
   * Creates a pod with the given settings.
   * In case pod creation fails, the given WebID link will be removed, if there is one, before throwing an error.
   */
  protected async createPod(accountId: string, settings: PodSettings, overwrite: boolean, webIdLink?: string):
  Promise<string> {
    try {
      return await this.podStore.create(accountId, settings, overwrite);
    } catch (error: unknown) {
      // Undo the WebID linking if pod creation fails
      if (webIdLink) {
        await this.webIdStore.delete(webIdLink);
      }
      throw error;
    }
  }
}
