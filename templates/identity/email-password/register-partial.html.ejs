<%
  const isBlankForm = !('prefilled' in locals);
  prefilled = locals.prefilled || {};
%>

<fieldset>
  <legend>Your WebID</legend>
  <p>
    A <em>WebID</em> is a unique identifier for you
    in the form of a URL.
    <br>
    You WebID lets you log in to Tribes and other Solid apps
    and access non-public data in Pods.
  </p>
  <div class="mb-3 form-check">
    <input type="radio" class="form-check-input" id="createWebIdOn" name="createWebId" value="on"<%
        if (isBlankForm || prefilled.createWebId) { %> checked<% } %>>
    <label class="form-check-label" for="createWebId">Create a new WebID for my Pod.</label>
    <p id="createWebIdForm">
      Please also create a Pod below, since your WebID will be stored there.
    </p>
  </div>
  <div class="mb-3 form-check">
    <input class="form-check-input" type="radio" id="createWebIdOff" name="createWebId" value=""<%
    if (!isBlankForm && !prefilled.createWebId) { %> checked<% } %>>
    <label class="form-check-label" for="createWebId">Use my existing WebID to access my Pod.</label>
    <div id="existingWebIdForm">
      <div class="mb-3">
        <label for="webId">Existing WebID:</label>
        <input id="webId" class="form-control" type="text" name="webId" value="<%= prefilled.webId || '' %>">
      </div>
      <div class="mb-3 form-check">
          <input type="checkbox" class="form-check-input" id="register" name="register"<%
          if (isBlankForm || prefilled.register) { %> checked<% } %>>
          <label class="form-check-label" for="register">Use my new account to log in with this WebID.</label>
      </div>
    </div>
  </div>
</fieldset>

<fieldset>
  <legend>Your Pod</legend>
  <p>
    A Pod is a storage place for your data.
  </p>
  <div>
    <div class="form-checkbox form-check mb-3">
      <input type="checkbox" class="form-check-input" id="createPod" name="createPod"<%
        if (isBlankForm || prefilled.createPod) { %> checked<% } %>>
      <label class="form-check-label">Create a new Pod with my WebID as owner<% if (locals.allowRootPod) { %> in the root<% } %>.</label>
    </div>
    <div id="createPodForm" class="mb-3">
      <% if (!locals.allowRootPod) { %>
          <label for="podName">Pod name:</label>
          <input id="podName" class="form-control" type="text" name="podName" value="<%= prefilled.podName || '' %>">
      <% } %>
    </div>
  </div>
</fieldset>

<fieldset>
  <legend>Your account</legend>
  <div>
    <p>
      Choose the credentials you want to use to log in to this server in the future.
    </p>
    <div class="mb-3">
        <label for="email">Email:</label>
        <input id="email" class="form-control" type="text" name="email" value="<%= prefilled.email || '' %>" >
    <div>
    <div id="passwordForm">
      <div>
        <label for="password">Password:</label>
        <input class="form-control" id="password" type="password" name="password">
      </div>
      <div>
        <label for="confirmPassword">Confirm password:</label>
        <input class="form-control" id="confirmPassword" type="password" name="confirmPassword">
      </div>
    </div>
  </div>
</fieldset>

<!-- Assist the user with filling out the form by hiding irrelevant fields -->
<script>
  const elements = {};

  // Wires up the DOM element with the specified ID
  function registerElement(id) {
    const element = document.getElementById(id) || document.createElement('input');
    elements[id] = element;
    element.addEventListener('change', synchronizeInputFields);
  }

  // Wire up all elements
  [
    'mainForm',
    'createWebIdOn', 'createWebIdOff', 'createWebIdForm', 'existingWebIdForm', 'webId',
    'createPod', 'createPodForm', 'podNameForm', 'podName',
    'register', 'passwordForm',
  ].forEach(registerElement);

  // Conditions under which elements should be visible
  const visibilityConditions = {
    createWebIdForm: () => elements.createWebIdOn.checked,
    existingWebIdForm: () => elements.createWebIdOff.checked,
    createPodForm: () => elements.createPod.checked,
  };

  // Ensures that the only relevant input fields are visible and enabled
  function synchronizeInputFields({ srcElement } = {}) {
    // The user needs a Pod if they want to create a WebID
    if (elements.createWebIdOn.checked)
      elements.createPod.checked = true;

    // Hide irrelevant fields
    for (const [id, condition] of Object.entries(visibilityConditions))
      setVisibility(id, condition());

    // Lock pod creation if a WebID is requested
    elements.createPod.disabled = elements.createWebIdOn.checked;

    // If child elements have just been activated, focus on them
    if (srcElement?.checked) {
      switch(document.activeElement) {
      case elements.createWebIdOff:
        const { webId } = elements;
        webId.value = webId.value.startsWith('http') ? webId.value : 'https://';
        webId.focus();
        break;
      case elements.createPod:
        elements.podName.focus();
        break;
      }
    }
  }

  // Prepare the form when the DOM is ready
  addEventListener('DOMContentLoaded', (event) => {
    synchronizeInputFields();
    elements.mainForm.classList.add('loaded');
  });

  // Enable all elements on form submission (otherwise their value is not submitted)
  elements.mainForm.addEventListener('submit', () => {
    for (const child of getDescendants(elements.mainForm)) {
      if (child.name)
        child.disabled = false;
    }
  });
  elements.mainForm.addEventListener('formdata', synchronizeInputFields);
</script>
